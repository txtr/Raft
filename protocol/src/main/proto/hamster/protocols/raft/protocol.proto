syntax = "proto3";

package hamster.protocols.raft;

import "hamster/protocols/raft/log.proto";
import "hamster/protocols/raft/raft.proto";

option java_package = "io.hamster.protocols.raft.protocol";
option java_outer_classname = "RaftProtocolProto";
option java_multiple_files = true;

message PollRequest {
  int64 term = 1;
  string candidate = 2;
  int64 last_log_index = 3;
  int64 last_log_term = 4;
}

message PollResponse {
  ResponseStatus status = 1;
  RaftError error = 2;
  int64 term = 3;
  bool accepted = 4;
}

message VoteRequest {
  int64 term = 1;
  string candidate = 2;
  int64 last_log_index = 3;
  int64 last_log_term = 4;
}

message VoteResponse {
  ResponseStatus status = 1;
  RaftError error = 2;
  int64 term = 3;
  bool voted = 4;
}

message AppendRequest {
  int64 term = 1;
  string leader = 2;
  int64 prev_log_index = 3;
  int64 prev_log_term = 4;
  repeated hamster.protocols.raft.RaftLogEntry entries = 5;
  int64 commit_index = 6;
}

message AppendResponse {
  ResponseStatus status = 1;
  RaftError error = 2;
  int64 term = 3;
  bool succeeded = 4;
  int64 last_log_index = 5;
}

enum RaftError {
  NO_LEADER = 0;
  QUERY_FAILURE = 1;
  COMMAND_FAILURE = 2;
  APPLICATION_ERROR = 3;
  ILLEGAL_MEMBER_STATE = 4;
  UNKNOWN_CLIENT = 5;
  UNKNOWN_SESSION = 6;
  UNKNOWN_SERVICE = 7;
  CLOSED_SESSION = 8;
  PROTOCOL_ERROR = 9;
  CONFIGURATION_ERROR = 10;
  UNAVAILABLE = 11;
}

enum ResponseStatus {
  OK = 0;
  ERROR = 1;
}

service RaftService{
  rpc Poll(PollRequest) returns (PollResponse) {}
  rpc Vote(VoteRequest) returns (VoteResponse) {}
  rpc Append(AppendRequest) returns (AppendResponse) {}
}